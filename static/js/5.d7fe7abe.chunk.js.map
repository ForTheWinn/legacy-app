{"version":3,"sources":["packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/saved-wallets/components/form.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/saved-wallets/index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","formik__WEBPACK_IMPORTED_MODULE_1__","_components_password_input__WEBPACK_IMPORTED_MODULE_2__","_components_display_error__WEBPACK_IMPORTED_MODULE_3__","Form","props","savedWallets","isSubmitting","values","setFieldValue","submitForm","status","setStatus","a","createElement","className","onBlur","e","target","value","map","item","address","key","encryptedKey","onKeyDown","password","onChange","val","error","message","onClose","undefined","disabled","type","concat","_cityofzion_neon_js__WEBPACK_IMPORTED_MODULE_0__","_cityofzion_neon_js__WEBPACK_IMPORTED_MODULE_0___default","_components_form__WEBPACK_IMPORTED_MODULE_2__","yup__WEBPACK_IMPORTED_MODULE_3__","ValidateSchema","Yup","shape","required","SavedWallets","withFormik","mapPropsToValues","length","validationSchema","handleSubmit","_ref","setSubmitting","Neon","create","account","decrypt","then","onConnected","provider","privateKey","encrypted","catch"],"mappings":"6FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,IAiEeS,UA1DF,SACXC,GACG,IAEDC,EAOED,EAPFC,aACAC,EAMEF,EANFE,aACAC,EAKEH,EALFG,OACAC,EAIEJ,EAJFI,cACAC,EAGEL,EAHFK,WACAC,EAEEN,EAFFM,OACAC,EACEP,EADFO,UAEF,OACEb,EAAAc,EAAAC,cAACb,EAAA,EAAD,KACEF,EAAAc,EAAAC,cAAA,OAAKC,UAAU,SACbhB,EAAAc,EAAAC,cAAA,OAAKC,UAAU,SAAf,iBACAhB,EAAAc,EAAAC,cAAA,OAAKC,UAAU,WACbhB,EAAAc,EAAAC,cAAA,OAAKC,UAAU,uBACbhB,EAAAc,EAAAC,cAAA,UAAQE,OAAQ,SAAAC,GAAC,OAAIR,EAAc,eAAgBQ,EAAEC,OAAOC,SACzDb,EAAac,IAAI,SAAAC,GAChB,SAAIA,IAAQA,EAAKC,UAEbvB,EAAAc,EAAAC,cAAA,UAAQS,IAAKF,EAAKC,QAASH,MAAOE,EAAKG,cACpCH,EAAKC,eAUtBvB,EAAAc,EAAAC,cAAA,OAAKC,UAAU,SACbhB,EAAAc,EAAAC,cAAA,OAAKC,UAAU,SAAf,YACAhB,EAAAc,EAAAC,cAACZ,EAAA,QAAD,CACEuB,UAAWf,EACXS,MAAOX,EAAOkB,SACdC,SAAU,SAAAC,GAAG,OAAInB,EAAc,WAAYmB,OAG9CjB,GAAUA,EAAOkB,OAChB9B,EAAAc,EAAAC,cAACX,EAAA,QAAD,CACE2B,QAASnB,EAAOkB,MAChBE,QAAS,kBAAMnB,OAAUoB,MAG7BjC,EAAAc,EAAAC,cAAA,UACEmB,UAAWzB,EAAOkB,SAClBQ,KAAK,SACLnB,UAAS,qBAAAoB,OAAuB5B,EAAe,aAAe,KAHhE,2CCtDNZ,EAAAC,EAAAC,GAAA,IAAAuC,EAAAzC,EAAA,GAAA0C,EAAA1C,EAAAK,EAAAoC,GAAAnC,EAAAN,EAAA,IAAA2C,EAAA3C,EAAA,KAAA4C,EAAA5C,EAAA,KAUM6C,EAAiBC,WAAaC,MAAM,CACxChB,SAAUe,WAAaE,SAAS,cAG5BC,EAAeC,YAMnB,CACAC,iBAAkB,SAACzC,GACjB,MAAO,CACLmB,aACEnB,EAAMC,cAAgBD,EAAMC,aAAayC,OAAS,EAC9C1C,EAAMC,aAAa,GAAGkB,aACtB,GACNE,SAAU,KAGdsB,iBAAkBR,EAClBS,aAAc,SAACzC,EAAD0C,GAA6D,IAAtC7C,EAAsC6C,EAAtC7C,MAAO8C,EAA+BD,EAA/BC,cAAevC,EAAgBsC,EAAhBtC,UACzCwC,IAAKC,OAAOC,QAAQ9C,EAAOgB,cAExC+B,QAAQ/C,EAAOkB,UACf8B,KAAK,SAAAF,GACJH,GAAc,GACd9C,EAAMoD,YAAY,CAChBC,SAAU,QACVpC,QAASgC,EAAQhC,QACjBqC,WAAYL,EAAQK,WACpBnC,aAAc8B,EAAQM,cAGzBC,MAAM,SAAA5C,GACLkC,GAAc,GACdvC,EAAU,CAAEiB,MAAOZ,EAAEa,cAhCRe,CAmClBzC,WAEYwC","file":"static/js/5.d7fe7abe.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form as FormikForm, FormikProps } from \"formik\";\nimport { Nep2States } from \"../../import-nep2\";\nimport PasswordInput from \"../../../components/password-input\";\nimport DisplayError from \"../../../components/display-error\";\nimport { StoredWalletProps } from \"../../../../../../../../types\";\n\nconst Form = (\n  props: { savedWallets: StoredWalletProps[] } & FormikProps<Nep2States>\n) => {\n  const {\n    savedWallets,\n    isSubmitting,\n    values,\n    setFieldValue,\n    submitForm,\n    status,\n    setStatus,\n  } = props;\n  return (\n    <FormikForm>\n      <div className=\"field\">\n        <div className=\"label\">Saved wallets</div>\n        <div className=\"control\">\n          <div className=\"select is-fullwidth\">\n            <select onBlur={e => setFieldValue(\"encryptedKey\", e.target.value)}>\n              {savedWallets.map(item => {\n                if (item && item.address) {\n                  return (\n                    <option key={item.address} value={item.encryptedKey}>\n                      {item.address}\n                    </option>\n                  );\n                }\n                return false;\n              })}\n            </select>\n          </div>\n        </div>\n      </div>\n      <div className=\"field\">\n        <div className=\"label\">Password</div>\n        <PasswordInput\n          onKeyDown={submitForm}\n          value={values.password}\n          onChange={val => setFieldValue(\"password\", val)}\n        />\n      </div>\n      {status && status.error && (\n        <DisplayError\n          message={status.error}\n          onClose={() => setStatus(undefined)}\n        />\n      )}\n      <button\n        disabled={!values.password}\n        type=\"submit\"\n        className={`button is-primary ${isSubmitting ? \"is-loading\" : \"\"}`}\n      >\n        Open\n      </button>\n    </FormikForm>\n  );\n};\n\nexport default Form;\n","import Neon from \"@cityofzion/neon-js\";\nimport { withFormik } from \"formik\";\nimport Form from \"./components/form\";\nimport * as Yup from \"yup\";\nimport { Nep2States } from \"../import-nep2\";\nimport {\n  CurrentWalletProps,\n  StoredWalletProps,\n} from \"../../../../../../../types\";\n\nconst ValidateSchema = Yup.object().shape({\n  password: Yup.string().required(\"Required\"),\n});\n\nconst SavedWallets = withFormik<\n  {\n    savedWallets: StoredWalletProps[];\n    onConnected: (wallet: CurrentWalletProps) => void;\n  },\n  Nep2States\n>({\n  mapPropsToValues: (props: any) => {\n    return {\n      encryptedKey:\n        props.savedWallets && props.savedWallets.length > 0\n          ? props.savedWallets[0].encryptedKey\n          : \"\",\n      password: \"\",\n    };\n  },\n  validationSchema: ValidateSchema,\n  handleSubmit: (values: Nep2States, { props, setSubmitting, setStatus }) => {\n    const account = Neon.create.account(values.encryptedKey);\n    account\n      .decrypt(values.password)\n      .then(account => {\n        setSubmitting(false);\n        props.onConnected({\n          provider: \"LOCAL\",\n          address: account.address,\n          privateKey: account.privateKey,\n          encryptedKey: account.encrypted,\n        });\n      })\n      .catch(e => {\n        setSubmitting(false);\n        setStatus({ error: e.message });\n      });\n  },\n})(Form);\n\nexport default SavedWallets;\n"],"sourceRoot":""}