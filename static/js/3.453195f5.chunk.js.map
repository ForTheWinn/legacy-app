{"version":3,"sources":["packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/components/form.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/index.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/components/backup.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","formik__WEBPACK_IMPORTED_MODULE_1__","_backup__WEBPACK_IMPORTED_MODULE_2__","_components_password_input__WEBPACK_IMPORTED_MODULE_3__","_components_display_error__WEBPACK_IMPORTED_MODULE_4__","props","onConnected","touched","errors","isSubmitting","values","setFieldValue","submitForm","status","setStatus","account","a","createElement","className","onKeyDown","onChange","val","value","password","error","message","onClose","undefined","disabled","concat","_cityofzion_neon_js__WEBPACK_IMPORTED_MODULE_0__","_cityofzion_neon_js__WEBPACK_IMPORTED_MODULE_0___default","_components_form__WEBPACK_IMPORTED_MODULE_2__","yup__WEBPACK_IMPORTED_MODULE_3__","ValidateSchema","Yup","shape","required","CreateWallet","withFormik","mapPropsToValues","validationSchema","handleSubmit","_ref","setSubmitting","Neon","create","encrypt","then","address","encryptedKey","encrypted","privateKey","catch","e","Form","BackupKeys","_useState","useState","_useState2","Object","_Users_ed_Projects_legacy_n2_ftw_repos_ftw_lotto_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isAgreed","setAgreement","react__WEBPACK_IMPORTED_MODULE_1___default","style","wordBreak","type","checked","onClick","provider"],"mappings":"+FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAYeE,EAAA,iBAACQ,GAAmD,IAE/DC,EASED,EATFC,YACAC,EAQEF,EARFE,QACAC,EAOEH,EAPFG,OACAC,EAMEJ,EANFI,aACAC,EAKEL,EALFK,OACAC,EAIEN,EAJFM,cACAC,EAGEP,EAHFO,WACAC,EAEER,EAFFQ,OACAC,EACET,EADFS,UAGF,OADoBJ,EAAZK,QAEChB,EAAAiB,EAAAC,cAACf,EAAA,QAAD,CAAYI,YAAaA,EAAaS,QAASL,EAAOK,UAG3DhB,EAAAiB,EAAAC,cAAChB,EAAA,EAAD,KACEF,EAAAiB,EAAAC,cAAA,OAAKC,UAAU,SACbnB,EAAAiB,EAAAC,cAAA,OAAKC,UAAU,SAAf,2BACAnB,EAAAiB,EAAAC,cAACd,EAAA,QAAD,CACEgB,UAAW,kBAAMP,GACjBQ,SAAU,SAAAC,GAAG,OAAIV,EAAc,WAAYU,IAC3CC,MAAOZ,EAAOa,WAEff,EAAOe,UAAYhB,EAAQgB,UAC1BxB,EAAAiB,EAAAC,cAAA,OAAKC,UAAU,kBAAkBV,EAAOe,WAG3CV,GAAUA,EAAOW,OAChBzB,EAAAiB,EAAAC,cAACb,EAAA,QAAD,CACEqB,QAASZ,EAAOW,MAChBE,QAAS,kBAAMZ,OAAUa,MAG7B5B,EAAAiB,EAAAC,cAAA,UACEW,UAAWlB,EAAOa,SAClBL,UAAS,qBAAAW,OAAuBpB,EAAe,aAAe,KAFhE,6CC/CRd,EAAAC,EAAAC,GAAA,IAAAiC,EAAAnC,EAAA,GAAAoC,EAAApC,EAAAK,EAAA8B,GAAA7B,EAAAN,EAAA,IAAAqC,EAAArC,EAAA,KAAAsC,EAAAtC,EAAA,KAcMuC,EAAiBC,WAAaC,MAAM,CACxCb,SAAUY,WAAaE,SAAS,cAG5BC,EAAeC,YAAsC,CACzDC,iBAAkB,WAChB,MAAO,CACLjB,SAAU,GACVR,QAAS,OAGb0B,iBAAkBP,EAClBQ,aAAc,SACZhC,EADYiC,GAGT,IADDhC,EACCgC,EADDhC,cAAeiC,EACdD,EADcC,cAAe9B,EAC7B6B,EAD6B7B,UAEhB+B,IAAKC,OAAO/B,QAAQ,IAEjCgC,QAAQrC,EAAOa,UACfyB,KAAK,SAAAjC,GACJ6B,GAAc,GACdjC,EAAc,UAAW,CACvBsC,QAASlC,EAAQkC,QACjBC,aAAcnC,EAAQoC,UACtBC,WAAYrC,EAAQqC,WACpB7B,SAAUb,EAAOa,aAGpB8B,MAAM,SAAAC,GACLV,GAAc,GACd9B,EAAU,CACRU,MAAO8B,EAAE7B,cA3BEc,CA+BlBgB,WAEYjB,+ECOAkB,UA7CI,SAACnD,GAA2B,IAAAoD,EACZC,oBAAS,GADGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtCK,EADsCH,EAAA,GAC5BI,EAD4BJ,EAAA,GAErC5C,EAAyBV,EAAzBU,QAAST,EAAgBD,EAAhBC,YACjB,OACE0D,EAAAhD,EAAAC,cAAA,WACE+C,EAAAhD,EAAAC,cAAA,OAAKC,UAAU,wBAAf,wFAIA8C,EAAAhD,EAAAC,cAAA,OAAKC,UAAU,UAAU+C,MAAO,CAAEC,UAAW,cAC3CF,EAAAhD,EAAAC,cAAA,UACE+C,EAAAhD,EAAAC,cAAA,uBAAeF,EAAQQ,UACvByC,EAAAhD,EAAAC,cAAA,6BAAqBF,EAAQkC,SAC7Be,EAAAhD,EAAAC,cAAA,4BAAoBF,EAAQmC,cAC5Bc,EAAAhD,EAAAC,cAAA,0BAAkBF,EAAQqC,cAG9BY,EAAAhD,EAAAC,cAAA,WACA+C,EAAAhD,EAAAC,cAAA,SAAOC,UAAU,YACf8C,EAAAhD,EAAAC,cAAA,SACEkD,KAAK,WACLC,QAASN,EACT1C,SAAU,kBAAM2C,GAAcD,MAJlC,iCAQAE,EAAAhD,EAAAC,cAAA,WACA+C,EAAAhD,EAAAC,cAAA,UACEW,UAAWkC,EACX5C,UAAU,oBACVmD,QAAS,kBACP/D,EAAY,CACVgE,SAAU,QACVrB,QAASlC,EAAQkC,QACjBC,aAAcnC,EAAQmC,aACtBE,WAAYrC,EAAQqC,eAR1B","file":"static/js/3.453195f5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form as FormikForm, FormikProps } from \"formik\";\nimport BackupKeys from \"./backup\";\nimport { CreateWalletStates } from \"../index\";\nimport PasswordInput from \"../../../components/password-input\";\nimport DisplayError from \"../../../components/display-error\";\nimport { CurrentWalletProps } from \"../../../../../../../../types\";\n\ninterface Props {\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nexport default (props: Props & FormikProps<CreateWalletStates>) => {\n  const {\n    onConnected,\n    touched,\n    errors,\n    isSubmitting,\n    values,\n    setFieldValue,\n    submitForm,\n    status,\n    setStatus,\n  } = props;\n  const { account } = values;\n  if (account) {\n    return <BackupKeys onConnected={onConnected} account={values.account} />;\n  } else {\n    return (\n      <FormikForm>\n        <div className=\"field\">\n          <div className=\"label\">Password for new wallet</div>\n          <PasswordInput\n            onKeyDown={() => submitForm}\n            onChange={val => setFieldValue(\"password\", val)}\n            value={values.password}\n          />\n          {errors.password && touched.password && (\n            <div className=\"help is-danger\">{errors.password}</div>\n          )}\n        </div>\n        {status && status.error && (\n          <DisplayError\n            message={status.error}\n            onClose={() => setStatus(undefined)}\n          />\n        )}\n        <button\n          disabled={!values.password}\n          className={`button is-primary ${isSubmitting ? \"is-loading\" : \"\"}`}\n        >\n          Create\n        </button>\n      </FormikForm>\n    );\n  }\n};\n","import Neon from \"@cityofzion/neon-js\";\nimport { withFormik } from \"formik\";\nimport Form from \"./components/form\";\nimport * as Yup from \"yup\";\nimport { CurrentWalletProps } from \"../../../../../../../types\";\nexport interface Props {\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nexport interface CreateWalletStates {\n  password: string;\n  account: any;\n}\n\nconst ValidateSchema = Yup.object().shape({\n  password: Yup.string().required(\"Required\"),\n});\n\nconst CreateWallet = withFormik<Props, CreateWalletStates>({\n  mapPropsToValues: () => {\n    return {\n      password: \"\",\n      account: null,\n    };\n  },\n  validationSchema: ValidateSchema,\n  handleSubmit: (\n    values: CreateWalletStates,\n    { setFieldValue, setSubmitting, setStatus }\n  ) => {\n    const account = Neon.create.account(\"\");\n    account\n      .encrypt(values.password)\n      .then(account => {\n        setSubmitting(false);\n        setFieldValue(\"account\", {\n          address: account.address,\n          encryptedKey: account.encrypted,\n          privateKey: account.privateKey,\n          password: values.password,\n        });\n      })\n      .catch(e => {\n        setSubmitting(false);\n        setStatus({\n          error: e.message,\n        });\n      });\n  },\n})(Form);\n\nexport default CreateWallet;\n","import React, { useState } from \"react\";\nimport { CurrentWalletProps } from \"../../../../../../../../types\";\n\ninterface BackupKeysProps {\n  account: {\n    password: string;\n    address: string;\n    encryptedKey: string;\n    privateKey: string;\n  };\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nconst BackupKeys = (props: BackupKeysProps) => {\n  const [isAgreed, setAgreement] = useState(false);\n  const { account, onConnected } = props;\n  return (\n    <div>\n      <div className=\"notification is-info\">\n        You must save and backup the keys. If you lose them, you lose access to\n        your assets.\n      </div>\n      <div className=\"content\" style={{ wordBreak: \"break-all\" }}>\n        <ul>\n          <li>Password: {account.password}</li>\n          <li>Wallet address: {account.address}</li>\n          <li>Encrypted key: {account.encryptedKey}</li>\n          <li>Private key: {account.privateKey}</li>\n        </ul>\n      </div>\n      <hr />\n      <label className=\"checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={isAgreed}\n          onChange={() => setAgreement(!isAgreed)}\n        />\n        &nbsp;&nbsp;I have saved the keys\n      </label>\n      <hr />\n      <button\n        disabled={!isAgreed}\n        className=\"button is-primary\"\n        onClick={() =>\n          onConnected({\n            provider: \"LOCAL\",\n            address: account.address,\n            encryptedKey: account.encryptedKey,\n            privateKey: account.privateKey,\n          })\n        }\n      >\n        Open wallet\n      </button>\n    </div>\n  );\n};\n\nexport default BackupKeys;\n"],"sourceRoot":""}