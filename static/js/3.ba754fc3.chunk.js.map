{"version":3,"sources":["packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/components/backup.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/components/form.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/index.tsx"],"names":["BackupKeys","props","_useState","useState","_useState2","Object","_Users_ed_Projects_legacy_n2_ftw_repos_ftw_lotto_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isAgreed","setAgreement","account","onConnected","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","style","wordBreak","password","address","encryptedKey","privateKey","type","checked","onChange","disabled","onClick","provider","__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","formik__WEBPACK_IMPORTED_MODULE_1__","_backup__WEBPACK_IMPORTED_MODULE_2__","_components_password_input__WEBPACK_IMPORTED_MODULE_3__","_components_display_error__WEBPACK_IMPORTED_MODULE_4__","touched","errors","isSubmitting","values","setFieldValue","submitForm","status","setStatus","onKeyDown","val","value","error","message","onClose","undefined","concat","_cityofzion_neon_js__WEBPACK_IMPORTED_MODULE_0__","_cityofzion_neon_js__WEBPACK_IMPORTED_MODULE_0___default","_components_form__WEBPACK_IMPORTED_MODULE_2__","yup__WEBPACK_IMPORTED_MODULE_3__","ValidateSchema","Yup","shape","required","CreateWallet","withFormik","mapPropsToValues","validationSchema","handleSubmit","_ref","setSubmitting","Neon","create","encrypt","then","encrypted","catch","e","Form"],"mappings":"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","file":"static/js/3.ba754fc3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { CurrentWalletProps } from \"../../../../../../../../types\";\n\ninterface BackupKeysProps {\n  account: {\n    password: string;\n    address: string;\n    encryptedKey: string;\n    privateKey: string;\n  };\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nconst BackupKeys = (props: BackupKeysProps) => {\n  const [isAgreed, setAgreement] = useState(false);\n  const { account, onConnected } = props;\n  return (\n    <div>\n      <div className=\"notification is-info\">\n        You must save and backup the keys. If you lose them, you lose access to\n        your assets.\n      </div>\n      <div className=\"content\" style={{ wordBreak: \"break-all\" }}>\n        <ul>\n          <li>Password: {account.password}</li>\n          <li>Wallet address: {account.address}</li>\n          <li>Encrypted key: {account.encryptedKey}</li>\n          <li>Private key: {account.privateKey}</li>\n        </ul>\n      </div>\n      <hr />\n      <label className=\"checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={isAgreed}\n          onChange={() => setAgreement(!isAgreed)}\n        />\n        &nbsp;&nbsp;I have saved the keys\n      </label>\n      <hr />\n      <button\n        disabled={!isAgreed}\n        className=\"button is-primary\"\n        onClick={() =>\n          onConnected({\n            provider: \"LOCAL\",\n            address: account.address,\n            encryptedKey: account.encryptedKey,\n            privateKey: account.privateKey,\n          })\n        }\n      >\n        Open wallet\n      </button>\n    </div>\n  );\n};\n\nexport default BackupKeys;\n","import React from \"react\";\nimport { Form as FormikForm, FormikProps } from \"formik\";\nimport BackupKeys from \"./backup\";\nimport { CreateWalletStates } from \"../index\";\nimport PasswordInput from \"../../../components/password-input\";\nimport DisplayError from \"../../../components/display-error\";\nimport { CurrentWalletProps } from \"../../../../../../../../types\";\n\ninterface Props {\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nexport default (props: Props & FormikProps<CreateWalletStates>) => {\n  const {\n    onConnected,\n    touched,\n    errors,\n    isSubmitting,\n    values,\n    setFieldValue,\n    submitForm,\n    status,\n    setStatus,\n  } = props;\n  const { account } = values;\n  if (account) {\n    return <BackupKeys onConnected={onConnected} account={values.account} />;\n  } else {\n    return (\n      <FormikForm>\n        <div className=\"field\">\n          <div className=\"label\">Password for new wallet</div>\n          <PasswordInput\n            onKeyDown={() => submitForm}\n            onChange={val => setFieldValue(\"password\", val)}\n            value={values.password}\n          />\n          {errors.password && touched.password && (\n            <div className=\"help is-danger\">{errors.password}</div>\n          )}\n        </div>\n        {status && status.error && (\n          <DisplayError\n            message={status.error}\n            onClose={() => setStatus(undefined)}\n          />\n        )}\n        <button\n          disabled={!values.password}\n          className={`button is-primary ${isSubmitting ? \"is-loading\" : \"\"}`}\n        >\n          Create\n        </button>\n      </FormikForm>\n    );\n  }\n};\n","import Neon from \"@cityofzion/neon-js\";\nimport { withFormik } from \"formik\";\nimport Form from \"./components/form\";\nimport * as Yup from \"yup\";\nimport { CurrentWalletProps } from \"../../../../../../../types\";\nexport interface Props {\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nexport interface CreateWalletStates {\n  password: string;\n  account: any;\n}\n\nconst ValidateSchema = Yup.object().shape({\n  password: Yup.string().required(\"Required\"),\n});\n\nconst CreateWallet = withFormik<Props, CreateWalletStates>({\n  mapPropsToValues: () => {\n    return {\n      password: \"\",\n      account: null,\n    };\n  },\n  validationSchema: ValidateSchema,\n  handleSubmit: (\n    values: CreateWalletStates,\n    { setFieldValue, setSubmitting, setStatus }\n  ) => {\n    const account = Neon.create.account(\"\");\n    account\n      .encrypt(values.password)\n      .then(account => {\n        setSubmitting(false);\n        setFieldValue(\"account\", {\n          address: account.address,\n          encryptedKey: account.encrypted,\n          privateKey: account.privateKey,\n          password: values.password,\n        });\n      })\n      .catch(e => {\n        setSubmitting(false);\n        setStatus({\n          error: e.message,\n        });\n      });\n  },\n})(Form);\n\nexport default CreateWallet;\n"],"sourceRoot":""}