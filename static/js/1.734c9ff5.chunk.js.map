{"version":3,"sources":["packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/components/backup.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/import-privatekey/components/encrypt-privatekey/index.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/import-privatekey/components/verify-privatekey/index.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/import-privatekey/index.tsx"],"names":["BackupKeys","props","_useState","useState","_useState2","Object","_Users_ed_Projects_legacy_n2_ftw_repos_ftw_lotto_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isAgreed","setAgreement","account","onConnected","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","style","wordBreak","password","address","encryptedKey","privateKey","type","checked","onChange","disabled","onClick","provider","EncryptPrivateKey","_ref","onEncrypt","setPassword","_useState3","_useState4","isLoading","setLoading","_useState5","_useState6","error","setError","encrypt","Neon","create","then","encrypted","catch","message","Fragment","_components_password_input__WEBPACK_IMPORTED_MODULE_3__","value","val","onKeyDown","_components_display_error__WEBPACK_IMPORTED_MODULE_4__","onClose","concat","VerifyPrivateKey","onVerify","setPrivateKey","verifyPrivatekey","is","wif","htmlFor","id","placeholder","e","target","keyCode","_components_display_error__WEBPACK_IMPORTED_MODULE_3__","ImportPrivatekey","wallet","setWallet","_create_wallet_components_backup__WEBPACK_IMPORTED_MODULE_2__","assign","_components_encrypt_privatekey__WEBPACK_IMPORTED_MODULE_4__","_components_verify_privatekey__WEBPACK_IMPORTED_MODULE_3__"],"mappings":"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","file":"static/js/1.734c9ff5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { CurrentWalletProps } from \"../../../../../../../../types\";\n\ninterface BackupKeysProps {\n  account: {\n    password: string;\n    address: string;\n    encryptedKey: string;\n    privateKey: string;\n  };\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nconst BackupKeys = (props: BackupKeysProps) => {\n  const [isAgreed, setAgreement] = useState(false);\n  const { account, onConnected } = props;\n  return (\n    <div>\n      <div className=\"notification is-info\">\n        You must save and backup the keys. If you lose them, you lose access to\n        your assets.\n      </div>\n      <div className=\"content\" style={{ wordBreak: \"break-all\" }}>\n        <ul>\n          <li>Password: {account.password}</li>\n          <li>Wallet address: {account.address}</li>\n          <li>Encrypted key: {account.encryptedKey}</li>\n          <li>Private key: {account.privateKey}</li>\n        </ul>\n      </div>\n      <hr />\n      <label className=\"checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={isAgreed}\n          onChange={() => setAgreement(!isAgreed)}\n        />\n        &nbsp;&nbsp;I have saved the keys\n      </label>\n      <hr />\n      <button\n        disabled={!isAgreed}\n        className=\"button is-primary\"\n        onClick={() =>\n          onConnected({\n            provider: \"LOCAL\",\n            address: account.address,\n            encryptedKey: account.encryptedKey,\n            privateKey: account.privateKey,\n          })\n        }\n      >\n        Open wallet\n      </button>\n    </div>\n  );\n};\n\nexport default BackupKeys;\n","import React, { useState } from \"react\";\nimport Neon from \"@cityofzion/neon-js\";\nimport PasswordInput from \"../../../../components/password-input\";\nimport DisplayError from \"../../../../components/display-error\";\nimport { CurrentWalletProps } from \"../../../../../../../../../types\";\n\ninterface NewWalletProps extends CurrentWalletProps {\n  password: string;\n}\n\ninterface VerifyPrivateKeyProps {\n  privateKey: string;\n  onEncrypt: (wallet: NewWalletProps) => void;\n}\n\nconst EncryptPrivateKey = ({\n  privateKey,\n  onEncrypt,\n}: VerifyPrivateKeyProps) => {\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const encrypt = () => {\n    setLoading(true);\n    const account = Neon.create.account(privateKey);\n    account\n      .encrypt(password)\n      .then(account => {\n        setLoading(false);\n        onEncrypt({\n          provider: \"LOCAL\",\n          encryptedKey: account.encrypted,\n          address: account.address,\n          privateKey,\n          password,\n        });\n      })\n      .catch(error => {\n        setError(error.message);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <>\n      <div className=\"field\">\n        <div className=\"label\">Password</div>\n        <PasswordInput\n          value={password}\n          onChange={val => setPassword(val)}\n          onKeyDown={() => {\n            if (password) {\n              encrypt();\n            }\n          }}\n        />\n      </div>\n\n      <div className=\"is-size-7 content\">\n        <ul>\n          <li>Password must be at least 6 characters long.</li>\n          <li>You will need this password to unlock your wallet.</li>\n        </ul>\n      </div>\n      <hr />\n      {error && <DisplayError message={error} onClose={() => setError(\"\")} />}\n      <button\n        disabled={!password}\n        onClick={encrypt}\n        type=\"button\"\n        className={`button is-primary ${isLoading ? \"is-loading\" : \"\"}`}\n      >\n        Encrypt!\n      </button>\n    </>\n  );\n};\n\nexport default EncryptPrivateKey;\n","import React, { useState } from \"react\";\nimport Neon from \"@cityofzion/neon-js\";\nimport DisplayError from \"../../../../components/display-error\";\n\ninterface VerifyPrivateKeyProps {\n  onVerify: (privateKey: string) => void;\n}\n\nconst VerifyPrivateKey = ({ onVerify }: VerifyPrivateKeyProps) => {\n  const [privateKey, setPrivateKey] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const verifyPrivatekey = () => {\n    if (privateKey) {\n      if (Neon.is.privateKey(privateKey) || Neon.is.wif(privateKey)) {\n        onVerify(privateKey);\n      } else {\n        setError(\"Please check your private key. It it not a valid type.\");\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"field\">\n        <label htmlFor=\"privatekey\" className=\"label\">\n          Private key\n        </label>\n        <input\n          id=\"privatekey\"\n          className=\"input\"\n          placeholder=\"Private Key\"\n          value={privateKey}\n          onChange={e => setPrivateKey(e.target.value)}\n          onKeyDown={e => {\n            if (e.keyCode === 13 && privateKey) {\n              verifyPrivatekey();\n            }\n          }}\n        />\n      </div>\n      {error && <DisplayError message={error} onClose={() => setError(\"\")} />}\n      <button\n        onClick={verifyPrivatekey}\n        disabled={!privateKey}\n        className={`button is-primary`}\n      >\n        Verify your private key\n      </button>\n    </>\n  );\n};\n\nexport default VerifyPrivateKey;\n","import React, { useState } from \"react\";\nimport BackupKeys from \"../create-wallet/components/backup\";\nimport VerifyPrivateKey from \"./components/verify-privatekey\";\nimport EncryptPrivateKey from \"./components/encrypt-privatekey\";\nimport { CurrentWalletProps } from \"../../../../../../../types\";\n\nconst ImportPrivatekey = (props: {\n  onConnected: (wallet: CurrentWalletProps) => void;\n}) => {\n  const [privateKey, setPrivateKey] = useState(\"\");\n  const [wallet, setWallet] = useState<CurrentWalletProps>();\n  if (wallet) {\n    return (\n      // @ts-ignore\n      <BackupKeys {...props} account={wallet} />\n    );\n  }\n  return (\n    <>\n      {privateKey ? (\n        // @ts-ignore\n        <EncryptPrivateKey\n          privateKey={privateKey}\n          onEncrypt={wallet => setWallet(wallet)}\n        />\n      ) : (\n        <VerifyPrivateKey onVerify={privateKey => setPrivateKey(privateKey)} />\n      )}\n    </>\n  );\n};\n\nexport default ImportPrivatekey;\n"],"sourceRoot":""}